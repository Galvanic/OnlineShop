# coding: utf-8
"""
Script to automate who owes what for our online shopping.
Input: 	A .txt file generated by copying the confirmation email content
		into a text file (should also automate this, is there a
		Yahoo! Mail API ?)
		Asks who ordered which item
Output:	Calculates who owes who and how much ?

Future improvements:
- 
"""
import sys 
sys.path.append("/Users/jc5809/Dropbox/Programming/Learning Python/My python scripts/justine pymodules")
from jc import ask
import re
from collections import namedtuple
from code import interact

ocadoshop = "first food order ocado.txt"
flatmates = {"Ben":0.0, "Emily":0.0, "Helena":0.0, "Justine":0.0}
flatmate_names = flatmates.keys()
flatmate_names += [name[0] for name in flatmate_names] + ["Ben", "Em"]	# add diminutives in a more thourough manner

# make the ShopItem class (= a named tuple)
ShopItem = namedtuple("ShopItem", "name, price")

def powerset(lst): # is this the fastest way to make a powerset ?
	return reduce(lambda result, x: result +[subset +[x]for subset in result], lst,[[]])

def whoIs(diminutive):
	for name in flatmates.keys():
		match = re.search(r"^%s"%diminutive, name)
		if match:
			return name 
	else:
		raise ValueError, "We couldn't find the flatmate you are referring to."

def read_file(filepath):
	"""
	"""
	with open(filepath, "rU") as f:
		file = f.read()
		shop_items 	= re.findall(r'(^\d\d?) (.+?) £(\d\d?\.\d\d)', file, re.MULTILINE)
		other_costs = re.search(r'Delivery\s*£(\d\d?\.\d\d)\n^Voucher Saving\s*£(-?\d\d?.\d\d)', file, re.MULTILINE)

	delivery = float(other_costs.group(1))
	voucher  = float(other_costs.group(2))

	shop_items = [ShopItem(name, float(price)) for amount, name, price in shop_items for i in range(int(amount))]
	# need to make function to reformat floated price into a £price

	subtotal = sum([float(item.price) for item in shop_items])
	total = subtotal + voucher + delivery

	# check that subtotal and total correspond to the text file

	groups = [", ".join(people) for people in powerset(flatmates.keys())[1:]]

	for i, group in enumerate(groups):
		print i, group

	# ask whose it is
	# should I do this item by item asking whose it is ?
	# or should I do this per person, each person going though the list agreeing to what is theirs ?
	for i, item in enumerate(shop_items, 1):
		if i > 3:
			break

		who = ask("\nWho bought - %s - ?\t"%(item.name), flatmate_names+map(str, range(15)), "Enter a flatmate name or a value between 0 and 14.")
		# write this into a file so humans can check later

		# turn string into one of the groups
		

		who = groups[int(who)].split(", ")
		for person in who:
			# flatmates[person][0].append(item)
			flatmates[person] += item.price/len(who)

	for person in flatmates:
		if voucher:
			flatmates[person] += voucher/len(flatmates)
		flatmates[person] += delivery/len(flatmates)

	# making sure everything adds up, check-point n°2

	for person, total in flatmates.items():
		print "\n", person, "\t", total, 

	# calculating who owes what to who
	who_payed = ask("\n\nWho payed the shop ?", [name.lower() for name in flatmate_names], "Enter the name of someone living in this flat.")
	# easy, it's just the final total of each person
	# actual difficulty will be in Excel, how to reduce the amount of transactions
	who_payed = whoIs(who_payed)

	for person in [name for name in flatmates.keys() if name != who_payed]:
		print "\n%s owes %s £%.2f."%(person, who_payed, flatmates[person]),

	print "\n"
	return


def main():
	read_file(ocadoshop)
	return

if __name__ == '__main__':
	main()