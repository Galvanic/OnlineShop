# coding: utf-8

"""
Script to automate who owes what for an online shop (i.e. easily dividing
the bill).

Input:  A .txt file generated by copying the confirmation email content
        into a text file
        Asks who ordered which item
Output: Name of flatmate and their share of costs for that shop.

TODO: naming isn't quite there yet. Might want to explain here exactly
what each 'thing' represents.
"""

import re
import sys
import datetime as dt

from .models import Flatmate, Delivery, Purchase, Assignment

from .helpers import session,\
                        is_delivery_assigned,\
                        get_contributions,\
                        get_purchasers


def parse_receipt(receipt_text):
    """Finds all the ordered items (=purchases) in the receipt text (eg. the
    confirmation email for Ocado deliverys) using regular expressions.
    Returns a tuple (dict of delivery information,
                    list of tuples (description, quantity, price)).
    """
    purchases = re.findall(r'(^\d\d?) (.+?) Â£(\d\d?\.\d\d)', receipt_text, re.MULTILINE)

    delivery_date = re.search(r'Delivery date\s([\w\d ]+)', receipt_text)
    delivery_date = delivery_date.group(1)
    # format is WeekdayName MonthdayNumber MonthName
    delivery_date = dt.datetime.strptime(delivery_date, '%A %d %B')
    delivery_date = delivery_date.date()

    subtotal = re.search(r'Sub ?total \(estimated\)\s.(\d\d?\.\d\d)', receipt_text)
    subtotal = float(subtotal.group(1))

    delivery_cost = re.search(r'Delivery\s.(\d\d?\.\d\d)', receipt_text)
    delivery_cost = float(delivery_cost.group(1))

    voucher = re.search(r'Voucher Saving\s.(-?\d\d?.\d\d)', receipt_text)
    voucher = float(voucher.group(1))

    purchases = [
        {
            'description': description,
            'quantity':    int(quantity),
            'price':       float(price)
        }

        for quantity, description, price in purchases
    ]

    purchases.append({
        'description': 'Delivery costs',
        'quantity':    1,
        'price':       delivery_cost
    })

    if voucher:
        purchases.append({
            'description': 'Voucher savings',
            'quantity':    1,
            'price':       voucher
        })

    total = subtotal + voucher + delivery_cost

    delivery_info = {
        'date': delivery_date,
        'total': total
    }

    return delivery_info, purchases


def process_input_delivery(receipt_text):
    """Parses the receipt text. Looks to see if a receipt with that
    date already exists in the database (assumed that there wouldn't
    be multiple deliveries on the same day). If the delivery already
    exists, it's also assumed that its purchases will have already
    been added to the database. Otherwise if the delivery isn't found in
    the database, the purchases are added to the database.
    Returns the delivery id (whether the delivery existed and the id was
    fetched from the database or the delivery was new and a new id was
    created)
    """
    delivery_info, purchases = parse_receipt(receipt_text)

    delivery = session.query(Delivery).filter_by(date=delivery_info['date']).first()

    if delivery:
        print('Shop already exists.')
        pass

    else:
        new_delivery = Delivery(
            date = delivery_info['date'],
            total = delivery_info['total']
        )
        session.add(new_delivery)
        session.commit()

        purchases = [
            Purchase(
                description = p['description'],
                quantity = p['quantity'],
                price = p['price'],
                delivery_id = new_delivery.id
            )   for p in purchases
        ]
        session.add_all(purchases)
        session.commit()

        delivery = new_delivery

    return delivery.id